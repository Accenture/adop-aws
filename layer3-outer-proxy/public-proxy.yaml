---

AWSTemplateFormatVersion: "2010-09-09"

Description: |
  Layer 2 - Public Tier Outer Proxy Service

Parameters:
  BaseVpcId:
    Description: |
      ID of the VPC where the network will be created.
    Type: AWS::EC2::VPC::Id
    Default: ""
  PublicSubnets:
    Description: |
      Comma-delimited list of public subnets.
    Type: List<AWS::EC2::Subnet::Id>
  VpnSecurityGroup:
    Description: |
      Vpn Security Group for administrating EC2 instances (output from the OpenVPN service CloudFormation)
    Type: AWS::EC2::SecurityGroup::Id
  SSLCertificateARN:
    Description: |
      ARN of the SSL certificate to use for the ELB. Note: ELB Offloads SSL for the outer proxy.
    Type: String
    Default: ""
  OuterProxyClusterSize:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 12
    Description: |
      Desired number of nodes in the outer proxy ASG.
  OuterProxyKeyPairName:
    Description: |
      Outer proxy keypair name.
    Type: AWS::EC2::KeyPair::KeyName
  PublicProxySG:
    Description: |
      ID of public facing proxy SG (output from previous CloudFormation script)
    Type: AWS::EC2::SecurityGroup::Id
  ProxyInstanceType:
    Description: |
      Proxy instance type.
    Type: String
    Default: "t2.medium"
  InternalProxyDnsName:
    Type: String
    Description: |
      The internal proxy DNS name/address (your ADOP/C proxy private IP)
    Default: ""
  NATGatewayIdEipIP1:
    Description: |
      NAT Gateway Elastic IP IPv4 Address and Cidr 1 e.g. 54.1.1.1/32 (output of the public network CloudFormation)
    Type: String
    Default: ""
  NATGatewayIdEipIP2:
    Description: |
      NAT Gateway Elastic IP IPv4 Address and Cidr 2 e.g. 54.2.3.4/32 (output of the public network CloudFormation)
    Type: String
    Default: ""
  VpcAvailabilityZones:
    Description: |
      Comma-delimited list of Two Availability zones of the public subnets in the VPC.
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Default: ""
  ProxyConfigS3BucketName:
    Description: |
      Proxy Configuration S3 Bucket Name.
    Type: String
    Default: ""
  ProxyConfigS3BucketPath:
    Description: |
      Proxy configuration S3 Bucket path.
    Type: String
    Default: "conf"
  ProxyConfigS3BucketRegion:
    Description: |
      S3 Bucket region.
    Type: String
    Default: ""

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Infra Configuration"
        Parameters:
          - BaseVpcId
          - PublicSubnets
          - VpcAvailabilityZones
      -
        Label:
          default: "Proxy Configuration"
        Parameters:
          - SSLCertificateARN
          - InternalProxyDnsName
          - OuterProxyClusterSize
          - OuterProxyKeyPairName
          - ProxyInstanceType
          - PublicProxySG
          - ProxyConfigS3BucketPath
          - ProxyConfigS3BucketName
          - ProxyConfigS3BucketRegion
      -
        Label:
          default: "Security Groups"
        Parameters:
          - NATGatewayIdEipIP1
          - NATGatewayIdEipIP2
          - VpnSecurityGroup
    ParameterLabels:
      BaseVpcId:
        default: "Base VPC ID"
      PublicSubnets:
        default: "Public Subnets"
      VpcAvailabilityZones:
        default: "Public Subnet AZ"
      SSLCertificateARN:
        default: "SSL Certificate ARN"
      InternalProxyDnsName:
        default: "Internal Proxy DNS/IP Address"
      OuterProxyClusterSize:
        default: "Outer Proxy Desired Size"
      OuterProxyKeyPairName:
        default: "Outer Proxy Instance Kaypair"
      ProxyInstanceType:
        default: "Outer Proxy Instance Type"
      PublicProxySG:
        default: "Proxy SG ID"
      ProxyConfigS3BucketPath:
        default: "Proxy Config S3 Bucket path"
      ProxyConfigS3BucketName:
        default: "Proxy Config S3 Bucket name"
      ProxyConfigS3BucketRegion:
        default: "Proxy Config S3 Bucket region"
      NATGatewayIdEipIP1:
        default: "NAT Gateway ID 1 IP CIDR"
      NATGatewayIdEipIP2:
        default: "NAT Gateway ID 2 IP CIDR"
      VpnSecurityGroup:
        default: "VPN SG ID"

Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-9bf712f4
    eu-west-1:
      AMI: ami-7abd0209
    us-east-1:
      AMI: ami-6d1c2007
    us-west-2:
      AMI: ami-d2c924b2
    us-west-1:
      AMI: ami-af4333cf
    ap-southeast-2:
      AMI: ami-fedafc9d
    eu-west-2:
      AMI: ami-bb373ddf

Resources:
  PublicElbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Proxy Security Group
      VpcId:
        Ref: BaseVpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: NATGatewayIdEipIP1
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: NATGatewayIdEipIP1
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: NATGatewayIdEipIP2
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: NATGatewayIdEipIP2
      Tags:
        -
          Key: "Name"
          Value: !Join [ "-", [ !Ref "AWS::StackName", "Public", "ELB", "SG" ] ]

  OuterProxySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Proxy Security Group
      VpcId:
        Ref: BaseVpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: VpnSecurityGroup
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Ref: VpnSecurityGroup
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            Ref: VpnSecurityGroup
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: PublicElbSG
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Ref: PublicElbSG
      Tags:
        -
          Key: "Name"
          Value: !Join [ "-", [ !Ref "AWS::StackName", "Public", "Outer", "Proxy", "SG" ] ]

  ProxyElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
          Ref: PublicSubnets
      CrossZone: true
      Listeners:
        -
          LoadBalancerPort: 443
          InstancePort: 80
          Protocol: "HTTPS"
          SSLCertificateId:
            Ref: SSLCertificateARN
      HealthCheck:
        Target: "TCP:80"
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: 30
        Timeout: 5
      ConnectionSettings:
        IdleTimeout: 600
      SecurityGroups:
        -
          Ref: PublicElbSG
        -
          Ref: PublicProxySG

  S3DownloadRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      Path: "/"
    Type: AWS::IAM::Role

  S3DownloadRoleProfile:
    Properties:
      Path: "/"
      Roles:
      - Ref: S3DownloadRole
    Type: AWS::IAM::InstanceProfile

  S3DownloadPolicy:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          - s3:ListBucket
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: ProxyConfigS3BucketName
          Effect: Allow
      PolicyName: S3Download
      Roles:
      - Ref: S3DownloadRole
    Type: AWS::IAM::Policy

  ProxyServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Ref: VpcAvailabilityZones
      VPCZoneIdentifier:
          Ref: PublicSubnets
      MinSize: 1
      MaxSize: 12
      DesiredCapacity:
        Ref: OuterProxyClusterSize
      LaunchConfigurationName:
        Ref: ProxyServerLc
      LoadBalancerNames:
        -
          Ref: ProxyElasticLoadBalancer
      Tags:
        -
          Key: "Name"
          Value: !Join [ "-", [ !Ref "AWS::StackName", "Public", "Outer", "Proxy", "Server", "ASG" ] ]
          PropagateAtLaunch: true

  ProxyServerLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: 8
            VolumeType: "gp2"
        -
          DeviceName: "/dev/sda2"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: 50
            VolumeType: "gp2"
      InstanceType:
        Ref: ProxyInstanceType
      SecurityGroups:
        -
          Ref: OuterProxySG
      AssociatePublicIpAddress: true
      KeyName:
        Ref: OuterProxyKeyPairName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "AMI"]
      IamInstanceProfile:
        Ref: S3DownloadRoleProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo "################## Configuring Package Repositories ##################"

          cat > /etc/yum.repos.d/docker.repo <<-'EOF'
          [dockerrepo]
          name=Docker Repository
          baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
          enabled=1
          gpgcheck=1
          gpgkey=https://yum.dockerproject.org/gpg
          EOF

          yum -y install lvm2 git docker-engine-1.10.3-1.el7.centos.x86_64

          echo "################## Installing AWS CLI ##################"

          yum install -y wget
          wget https://bootstrap.pypa.io/get-pip.py
          python get-pip.py
          pip install --upgrade --user awscli
          export PATH=~/.local/bin:$PATH

          echo "################## Creating volumes ##################"
          pvcreate /dev/xvdb
          vgcreate vg-docker /dev/xvdb\n
          lvcreate -l 95%VG -n data vg-docker
          lvcreate -l 5%VG -n metadata vg-docker

          echo "################## Configurting Docker Daemon ##################"

          sed -i 's/ExecStart\\(.*\\)$/ExecStart\\1 --storage-driver=devicemapper --storage-opt dm.datadev=\\/dev\\/vg-docker\\/data --storage-opt dm.metadatadev=\\/dev\\/vg-docker\\/metadata/g' /usr/lib/systemd/system/docker.service
          systemctl daemon-reload && systemctl restart docker

          echo "################## Running Containers ##################"

          mkdir -p /data/config/proxy
          cd /data/config/proxy/
          aws s3 cp --recursive s3://${ProxyConfigS3BucketName}/${ProxyConfigS3BucketPath}/ . --region ${ProxyConfigS3BucketRegion}
          chmod -R 777 ./*
          docker run --restart="always" -p 80:80 -d -v $(pwd)/sites-enabled/:/usr/local/nginx/sites-enabled/ -e TARGET=${InternalProxyDnsName} --name=outer-proxy-nginx -d accenture/adop-outer-proxy:0.2.1

Outputs:
  ElbAddress:
    Description: |
      Outer Proxy ELB DNS Address.
    Value: !Join ["", [ "https://", !GetAtt ProxyElasticLoadBalancer.DNSName ]]
...
