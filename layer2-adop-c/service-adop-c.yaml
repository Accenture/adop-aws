AWSTemplateFormatVersion: '2010-09-09'

Description: A template to launch ADOP Gen 5 in a private subnet.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: ADOP Initial Admin User Details
        Parameters:
          - AdopUsername
          - AdopUserPassword
      -
        Label:
          default: Network Configuration
        Parameters:
          - VpcID
          - VPCCidr
          - VPCSubnet
      -
        Label:
          default: Instance Configuration
        Parameters:
          - KeyName

Parameters:
  AdopUsername:
    Default: changeme
    Description: ADOP admin account username. Username can not be set to 'admin' or 'Admin' and it must contain only letters and numbers. Minimum length is 3.
    Type: String
    MinLength: '3'
    AllowedPattern: (?!admin|Admin)[A-Za-z0-9.]*
    ConstraintDescription: Username can not be set to 'admin' or 'Admin' and it must contain only letters and numbers and minimum length is 3.
  AdopUserPassword:
    NoEcho: 'true'
    Description: ADOP admin account password. Must be at least 8 characters long and contain at least one number, and cannot contain word "password" or your username.
    Type: String
    MinLength: '8'
    AllowedPattern: (?!password|Password)[A-Za-z0-9]*([a-zA-Z]+[0-9]+|[0-9]+[a-zA-Z]+)
    ConstraintDescription: Password must contain only letters and numbers, it must contain at least one number, and cannot contain your username or word "password".
  VpcID:
    Description: VPC ID of where your instance will be created
    Type: AWS::EC2::VPC::Id
  VPCCidr:
    Description: VPC Cidr range to allow connection to the instance from within the VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  VPCSubnet:
    Description: Private subnet ID of your stack (ensure a NAT gateway is attached)
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Description: Key-pair name to use. Make sure you choose a key which you have!
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-9bf712f4
    eu-west-1:
      AMI: ami-7abd0209
    us-east-1:
      AMI: ami-6d1c2007
    us-west-2:
      AMI: ami-d2c924b2
    us-west-1:
      AMI: ami-af4333cf
    ap-southeast-2:
      AMI: ami-fedafc9d
    eu-west-2:
      AMI: ami-bb373ddf

Resources:

  ADOP5SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enabling access to all IPs and below listed ports from within VPC
      VpcId:
        Ref: VpcID
      SecurityGroupIngress:
      - CidrIp: 
          Ref: VPCCidr
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp:
          Ref: VPCCidr
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp:
          Ref: VPCCidr
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      - CidrIp:
          Ref: VPCCidr
        FromPort: '2376'
        IpProtocol: tcp
        ToPort: '2376'
      - CidrIp:
          Ref: VPCCidr
        FromPort: '25826'
        IpProtocol: udp
        ToPort: '25826'

  ADOP5Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: 'true'
          VolumeSize: 25
          VolumeType: gp2
      - DeviceName: /dev/sdf
        Ebs:
          DeleteOnTermination: 'false'
          VolumeType: gp2
          VolumeSize: 15
      - DeviceName: /dev/sdg
        Ebs:
          DeleteOnTermination: 'false'
          VolumeType: gp2
          VolumeSize: 25
      - DeviceName: /dev/sdh
        Ebs:
          DeleteOnTermination: 'false'
          VolumeType: gp2
          VolumeSize: 25
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - 'AMI'
      InstanceType: m4.xlarge
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
          - Fn::GetAtt:
            - ADOP5SecurityGroup
            - GroupId
        SubnetId:
          Ref: VPCSubnet
      Tags:
        - Key: Name
          Value:
            Fn::Join:
            - "-"
            - - Ref: AWS::StackName
              - ADOPInstance
        - Key: Service
          Value: ADOP-C
        - Key: NetworkTier
          Value: private
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          echo '==============================================================================='
          echo '=========================== Installing Yum Packages ==========================='
          echo '==============================================================================='
          cat > /etc/yum.repos.d/docker.repo <<-'EOF'
          [dockerrepo]
          name=Docker Repository
          baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
          enabled=1
          gpgcheck=1
          gpgkey=https://yum.dockerproject.org/gpg
          EOF
          yum -y install wget unzip git lvm2 docker-engine
          grep 'tcp://0.0.0.0:2375' /usr/lib/systemd/system/docker.service || sed -i 's#ExecStart\(.*\)$#ExecStart\1 -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375#' /usr/lib/systemd/system/docker.service
          pvcreate /dev/xvdh
          vgcreate vg-docker /dev/xvdh
          while [ $(lvs vg-docker/data &> /dev/null; echo $?) -ne 0 ]; do lvcreate -l 95%VG -n data vg-docker; done
          while [ $(lvs vg-docker/metadata &> /dev/null; echo $?) -ne 0 ]; do lvcreate -l 5%VG -n metadata vg-docker; done
          lvcreate -l 95%VG -n data vg-docker
          lvcreate -l 5%VG -n metadata vg-docker
          systemctl daemon-reload && systemctl enable docker && systemctl restart docker
          
          echo '==============================================================================='
          echo '============================== Installing AWS CLI ============================='
          echo '==============================================================================='
          wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
          rpm -Uvh epel-release-6-8.noarch.rpm
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          
          echo '=========================== Installing Docker Compose =========================='
          curl -L https://github.com/docker/compose/releases/download/1.7.1/docker-compose-`uname -s`-`uname -m` > /usr/bin/docker-compose
          chmod +x /usr/bin/docker-compose
          
          echo '=========================== Running Docker Compose =========================='
          export IP=$(hostname --ip-address)
          export PRIVATE_IP=$(curl http://instance-data/latest/meta-data/local-ipv4)
          export INITIAL_ADMIN_USER=${AdopUsername}
          export INITIAL_ADMIN_PASSWORD_PLAIN=${AdopUserPassword}
          export JENKINS_TOKEN=gAsuE35s
          export DOCKER_HOST=tcp://${!PRIVATE_IP}:2375
          set -e
          mkdir -p /data && cd /data
          git clone https://github.com/Accenture/adop-docker-compose
          cd /data/adop-docker-compose
          export METADATA_URL='http://169.254.169.254/latest/meta-data'
          export MAC_ADDRESS=$(curl -s ${!METADATA_URL}/network/interfaces/macs/)
          export AWS_VPC_ID=$(curl -s ${!METADATA_URL}/network/interfaces/macs/${!MAC_ADDRESS}/vpc-id/)
          export AWS_SUBNET_ID=$(curl -s ${!METADATA_URL}/network/interfaces/macs/${!MAC_ADDRESS}/subnet-id/)
          export AWS_AZ=$(curl -s ${!METADATA_URL}/placement/availability-zone)
          export AWS_DEFAULT_REGION=${!AWS_AZ%?}
          echo "export AWS_VPC_ID=${!AWS_VPC_ID}" > conf/provider/env.provider.aws.sh
          echo "export AWS_SUBNET_ID=${!AWS_SUBNET_ID}" >> conf/provider/env.provider.aws.sh 
          echo "export AWS_DEFAULT_REGION=${!AWS_DEFAULT_REGION}" >> conf/provider/env.provider.aws.sh 
          echo "export AWS_INSTANCE_TYPE='t2.large'" >> conf/provider/env.provider.aws.sh
          echo "export AWS_KEYPAIR=${KeyName}" >> conf/provider/env.provider.aws.sh
          ./adop compose -i ${!PRIVATE_IP} -f etc/aws/default.yml init
          sleep 10

          echo '=========================== Setting up ADOP-C =========================='
          until [[ $(curl -X GET -s ${!INITIAL_ADMIN_USER}:${!INITIAL_ADMIN_PASSWORD_PLAIN}@${!PRIVATE_IP}/jenkins/job/Load_Platform/lastBuild/api/json?pretty=true|grep result|cut -d$' ' -f5|sed 's|[^a-zA-Z]||g') == SUCCESS ]]; do echo "Load_Platform job not finished, sleeping for 5s"; sleep 5; done
          ./adop target set -t http://${!PRIVATE_IP} -u ${!INITIAL_ADMIN_USER} -p ${!INITIAL_ADMIN_PASSWORD_PLAIN}
          set +e
          
          echo "=========================== ADOP-C setup complete ==========================="
          curl -X PUT -H 'Content-Type:' --data-binary '{"Status": "SUCCESS","Reason": "ADOP Gen 5 is ready","UniqueId": "ADOP5Ec2Instance","Data": "Done"}' "${ADOP5WaitConditionHandle}"
  
  ADOP5WaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  ADOP5WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: ADOP5Ec2Instance
    Properties:
      Handle:
        Ref: ADOP5WaitConditionHandle
      Timeout: 1500

Outputs:
  ReleaseNote:
    Description: This is your starting point, please copy this URL into your web browser if you are behind a VPN.
    Value: !Join ["", [ "http://", !GetAtt ADOP5Ec2Instance.PrivateIp, ":/" ]]
